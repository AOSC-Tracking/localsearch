# -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
# This file is part of Tracker.

AC_PREREQ(2.57)
AC_INIT([tracker],[0.5.0],[tracker-list@gnome.org])
AC_CONFIG_SRCDIR([src/trackerd/trackerd.c])
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

AC_SUBST(PACKAGE_URL, [http://www.freedesktop.org/Software/Tracker])

CFLAGS="$CFLAGS"

# Checks for programs.
AC_PROG_CC
AC_HEADER_STDC

AM_PROG_LIBTOOL

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h sitdlib.h string.h sys/time.h unistd.h bzlib.h])

# Check for glib 2.0
PKG_CHECK_MODULES(GLIB2, [ glib-2.0 >= 2.4.0 ] gthread-2.0 >= 2.4.0)
AC_SUBST(GLIB2_CFLAGS)
AC_SUBST(GLIB2_LIBS)

#Check for pango
PKG_CHECK_MODULES(PANGO, [ pango >= 1.0.0 ])
AC_SUBST(PANGO_CFLAGS)
AC_SUBST(PANGO_LIBS)

# Check fo GMime
PKG_CHECK_MODULES(GMIME, [ gmime-2.0 >= 2.1.0 ])
AC_SUBST(GMIME_CFLAGS)
AC_SUBST(GMIME_LIBS)

# Check for Dbus 0.50 or higher
PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.50 dbus-glib-1 >= 0.50 ])
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

####################################################################
# Compiler warning checks
####################################################################
warning_support=yes
AC_ARG_ENABLE(warnings, [  --disable-warnings          compile without using gcc warnings],
			 [
				warning_support=no
			 ]
	 	)


if test "$warning_support" = "yes"; 
then
	CFLAGS="\
	-Wall \
	-Wchar-subscripts \
	-Wnested-externs -Wpointer-arith \
	-Wsign-compare \
	$CFLAGS"

fi


####################################################################
# Optional database/indexer component checks
####################################################################

use_sqlite=yes
use_mysql=no
AM_CONDITIONAL(BUILD_TEST, false)

AC_ARG_ENABLE(sqlite3, [--enable-test          build test suite],
			 [
				AM_CONDITIONAL(BUILD_TEST, true)
				AC_DEFINE(BUILD_TEST, [], [Define if we are building test stuff])
			 ]
	 	)

#AC_ARG_ENABLE(sqlite3, [--enable-sqlite3          build using sqlite and QDBM for indexing],
#			 [
#				
#				use_sqlite=yes
#				use_mysql=no
#			 ]
#	 	)

if test "$use_sqlite" = "yes"; 
then
	AC_DEFINE(USING_SQLITE, [], [Define if we are using sqlite])
	AM_CONDITIONAL(USING_SQLITE, true)
	DB_ENGINE=SQLite

	# Check for SQLite3
	PKG_CHECK_MODULES(SQLITE3, [ sqlite3 >= 3.2 ])
	AC_SUBST(SQLITE3_CFLAGS)
	AC_SUBST(SQLITE3_LIBS)

	# Check for QDBM
	PKG_CHECK_MODULES(QDBM, [ qdbm >= 1.8.0 ])
	AC_SUBST(QDBM_CFLAGS)
	AC_SUBST(QDBM_LIBS)

else

	# Embedded Mysql checks

	AM_CONDITIONAL(USING_SQLITE, false)

	DB_ENGINE=MySQL

	mysql_dir=""
	AC_ARG_WITH(mysql,
	    AC_HELP_STRING([--with-mysql=PATH], [directory where mysql is installed]),
	    [if test "$with_mysql" = no ; then
	       AC_MSG_ERROR(you need MySQL for this package. Sorry.)
	     elif test "$with_mysql" != yes ; then
	       mysql_dir="$with_mysql/bin"
	     fi ])

	# Try to find the mysql_config program
	AC_PATH_PROG(MYSQL_CONFIG, mysql_config, no, $mysql_dir $PATH )
	if test "$MYSQL_CONFIG" = no ; then
	   AC_MSG_ERROR([cannot find mysql_config...Please make sure you have the mysql development files installed])
	fi

	# Check to make sure we have MySQL
	DB_VERSION=`$MYSQL_CONFIG --version`

	AX_COMPARE_VERSION("$DB_VERSION", [ge], [5.0.19], 
         AC_MSG_RESULT(checking mysql version >= 5.0.19... yes),
	 AC_MSG_ERROR([Tracker requires version 5.0.19 or higher of the embedded MySQL library. Please install correct version and then restart compilation]))

	# Now make sure we've got mysqld
	MYSQL_LIBS=`$MYSQL_CONFIG --libmysqld-libs`
	if test $? != 0 ; then
	    AC_MSG_ERROR(Could not find the MySQL Embedded-server libraries.)
	fi

	# this is a bug in the embedded mysql - it should not need ssl!
	PKG_CHECK_MODULES(SSL, [ openssl >= 0.9.6 ])
	AC_SUBST(SSL_CFLAGS)
	AC_SUBST(SSL_LIBS)

	MYSQL_CFLAGS=`$MYSQL_CONFIG --cflags`
	MYSQL_CFLAGS=`eval echo $MYSQL_CFLAGS`
	MYSQL_LIBS=`eval echo $MYSQL_LIBS`

	MYSQL_CFLAGS="$MYSQL_CFLAGS $SSL_CFLAGS"
	MYSQL_LIBS="$MYSQL_LIBS $SSL_LIBS"

	# Now test that we can actually build with MySQL
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS $MYSQL_CFLAGS"

	AC_CHECK_HEADER([mysql/mysql.h],,AC_MSG_ERROR([unable to find MySQL header files]))

	save_LIBS="$LIBS"
	LIBS="$LIBS $MYSQL_LIBS"
	CPPFLAGS="$save_CPPFLAGS"
	LIBS="$save_LIBS"
	AC_SUBST(MYSQL_CFLAGS)
	AC_SUBST(MYSQL_LIBS)
fi

###############################################################################
# Check for file monitor backends
###############################################################################
AM_CONDITIONAL(HAVE_INOTIFY, false)
AM_CONDITIONAL(HAVE_INOTIFY_LINUX, false)
AM_CONDITIONAL(HAVE_FAM, false)

##################################################################
# check for inotify
##################################################################

inotify_support=no
inotify_linux=no
inotify_header=none
fs_monitor_backends=""
primary_backend="polling only"

AC_CHECK_HEADERS([linux/inotify.h],
		 [
		 inotify_linux=yes
		 inotify_support=yes
		 AC_DEFINE(HAVE_INOTIFY_LINUX, [], [Define if we have inotify and header is linux/inotify.h])
		 AM_CONDITIONAL(HAVE_INOTIFY_LINUX, true)
		 inotify_header=linux/inotify.h
		 ])

AC_CHECK_HEADERS([sys/inotify.h],
		 [
		 inotify_support=yes
		 inotify_linux=no
		 inotify_header=sys/inotify.h
		 ])



AC_ARG_ENABLE(inotify, [  --disable-inotify          build without enabling inotify for file monitoring],
			 [
				inotify_support=no
			 ]
	 	)


if test "$inotify_support" = "yes"; 
then
	AC_DEFINE(HAVE_INOTIFY, [], [Define if we have inotify])
	AM_CONDITIONAL(HAVE_INOTIFY, true)
	AC_ARG_ENABLE(debug, [  --enable-inotify-debug          turn on inotify debugging],
              [AC_DEFINE(LIBINOTIFY_DEBUG,, [is debugging enabled?])],)
	fs_monitor_backends="${fs_monitor_backends}inotify "
	primary_backend="inotify"
fi



##################################################################
# check for FAM/GAMIN
##################################################################

FAM_LIBS=
disable_fam=no
AC_ARG_ENABLE(fam, [  --disable-fam          build without enabling fam for file monitoring],
			 [
				disable_fam=yes
			 ]
	 	)

if  test "$disable_fam" = "no"
then
	PKG_CHECK_MODULES(GAMIN, gamin, have_fam=yes, have_fam=no)

	if test x"$have_fam" = "xyes"
	then       
		AC_DEFINE(HAVE_FAM, [], [Define if we have FAM])
		AM_CONDITIONAL(HAVE_FAM, true)
		if test "$fs_monitor_backends" = ""; then
			primary_backend="gamin"
			FAM_LIBS="-lgamin-1"
		fi 
        	fs_monitor_backends="${fs_monitor_backends}gamin"
	else
       		AC_CHECK_LIB(fam, FAMOpen,
			[AC_CHECK_HEADERS(fam.h,
			[AC_DEFINE(HAVE_FAM, [], [Define if we have FAM])
			AM_CONDITIONAL(HAVE_FAM, true)
			if test "$fs_monitor_backends" = ""; then
				primary_backend="fam"
				FAM_LIBS="-lfam"
			fi 
 	        	fs_monitor_backends="${fs_monitor_backends}fam"],
	    		AC_MSG_WARN(FAM support will not be built (header files not found)))],
	  		AC_MSG_WARN(FAM support will not be built (FAM library not found)))
	fi
fi
	
AC_SUBST(FAM_LIBS)


################################################################################
# check whether we need to compile internal libextractor or use an existing version
################################################################################

AM_CONDITIONAL(USING_INTERNAL_LIBEXTRACTOR, true)
compile_libextractor=yes
extractor_support="building internal version"
AC_CHECK_HEADERS([extractor.h],
		 [
		 	AM_CONDITIONAL(USING_INTERNAL_LIBEXTRACTOR, false)
			compile_libextractor=no
			extractor_support="not building - using an existing version found in system"
		 ])

AC_ARG_ENABLE(libextractor, [  --enable-libextractor          build with internal version of libextractor],
			 [
				AM_CONDITIONAL(USING_INTERNAL_LIBEXTRACTOR, true)
				compile_libextractor=yes
				extractor_support="building internal version"
			 ]
	 	)


if test "$compile_libextractor" = "yes"; 
then
	echo "building libextractor ...."
	AC_CONFIG_SUBDIRS(src/libextractor)
fi


##################################################################
# check for GTK dependencies to build tracker's GUI
##################################################################

GTK_REQUIRED=2.8
LIBGLADE_REQUIRED=2.5

PKG_CHECK_MODULES(GTK, [gtk+-2.0 >= $GTK_REQUIRED libglade-2.0 >= $LIBGLADE_REQUIRED], [have_gtk=yes] , [have_gtk=no])

AM_CONDITIONAL(HAVE_GTK, test "$have_gtk" = "yes")
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

##################################################################
# check for poppler's glib bingings
##################################################################

POPPLER_GLIB_REQUIRED=0.5.0
CAIRO_REQUIRED=1.0
GDK_REQUIRED=1.0

PKG_CHECK_MODULES(POPPLER_GLIB, [poppler-glib >= $POPPLER_GLIB_REQUIRED cairo >= $CAIRO_REQUIRED gdk-2.0 >= $GDK_REQUIRED], [have_poppler=yes] , [have_poppler=no])

AM_CONDITIONAL(HAVE_POPPLER_GLIB, test "$have_poppler" = "yes")
AC_SUBST(POPPLER_GLIB_CFLAGS)
AC_SUBST(POPPLER_GLIB_LIBS)
test "$have_poppler" = "yes" && AC_DEFINE(HAVE_POPPLER, [], [Define if we have poppler])

##################################################################
# check for ogg/vorbis
##################################################################

VORBIS_REQUIRED=1.1

PKG_CHECK_MODULES(VORBIS, [vorbisfile >= $VORBIS_REQUIRED], [have_vorbis=yes] , [have_vorbis=no])

AM_CONDITIONAL(HAVE_VORBIS, test "$have_vorbis" = "yes")
AC_SUBST(VORBIS_CFLAGS)
AC_SUBST(VORBIS_LIBS)
test "$have_vorbis" = "yes" && AC_DEFINE(HAVE_VORBIS, [], [Define if we have libvorbis])

##################################################################
# check for ogg/theora
##################################################################

THEORA_REQUIRED=1.1

PKG_CHECK_MODULES(THEORA, [theora >= $THEORA_REQUIRED], [have_theora=yes] , [have_theora=no])

AM_CONDITIONAL(HAVE_THEORA, test "$have_theora" = "yes")
AC_SUBST(THEORA_CFLAGS)
AC_SUBST(THEORA_LIBS)
test "$have_theora" = "yes" && AC_DEFINE(HAVE_THEORA, [], [Define if we have libtheora])


#####################################################

AM_CONFIG_HEADER(src/trackerd/config.h)

AC_CONFIG_FILES([
	Makefile	 
	tracker.pc
	data/Makefile
	data/english/Makefile
	filters/Makefile
	filters/application/Makefile
	filters/text/Makefile
	thumbnailers/Makefile
	thumbnailers/application/Makefile
	thumbnailers/image/Makefile
	src/Makefile
	src/text-filters/Makefile
	src/text-filters/html_converter/Makefile
	src/text-filters/ooo_converter/Makefile
	src/tracker-extract/Makefile
	src/trackerd/Makefile
	src/libtracker/Makefile
	src/tracker-gui/Makefile
])


AC_OUTPUT

echo "
Tracker-$VERSION:

	prefix:                			${prefix}
	source code location:			${srcdir}
	compiler:				${CC}
	enable gcc warnings:			$warning_support
	database and indexing engine :		$DB_ENGINE
	database version :			$DB_VERSION
	libextractor build:			$extractor_support			
	available file mointor backends :	$fs_monitor_backends
	file monitor backend to be used :	$primary_backend
	inotify header location :		$inotify_header
	GTK front-end :         		$have_gtk

Metadata extractors:

	pdf :					$have_poppler
	ogg/vorbis :				$have_vorbis
	ogg/theora :				$have_theora
"

