<?xml version="1.0"?>

<!--
//
// tracker.xul: Overlay for basic main window GUI items
//
// Copyright (C) 2007 Pierre Ã–stlund
//

//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
-->

<?xml-stylesheet href="chrome://tracker/skin/overlay.css" type="text/css"?>
<?xml-stylesheet href="chrome://tracker/content/tracker.css" type="text/css"?>
<!DOCTYPE overlay SYSTEM "chrome://tracker/locale/tracker.dtd">

<overlay id="tracker-overlay" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<stringbundleset id="stringbundleset">
		<stringbundle id="bundle_tracker" src="chrome://tracker/locale/strings.properties"/>
	</stringbundleset>
	
	<script src="trackerUtils.js"/>
	<script src="trackerUnindex.js"/>
	<script src="trackerService.js"/>

	<script type="application/x-javascript">
	<![CDATA[
		var observer = Components.classes['@mozilla.org/observer-service;1']
			.getService(Components.interfaces.nsIObserverService);
		var gTrackerSettings = GetJsService ('@tracker-project.org/services/settings;1');

		function onLoad ()
		{
			observer.addObserver (gServiceObserver, 'tracker-service', false);
			observer.addObserver (gQueueObserver, 'tracker-queue', false);
			initService ();
		}

		function onUnload ()
		{
			observer.removeObserver (gServiceObserver, 'tracker-service');
			observer.removeObserver (gQueueObserver, 'tracker-queue');
		}

		function onShowSettings (event)
		{
			window.openDialog ('chrome://tracker/content/trackerPrefs.xul',
				'PreferenceWindow',
				'chrome,toolbar,modal=no,resizable=no',
				'pref-indexing');
		}

		function onStatusbarClick (t)
		{
			var elem = document.getElementById ('tracker-icon');
			
			// We need to check if we are in error mode. If we are, we show a message box with warnings.
			// Otherwise we invert the running mode.
			if (elem.getAttribute  ('status') == 'error') {
				var bundle = document.getElementById ('bundle_tracker');
				
				window.alert (getLastWarning ());
				setWarningStatus ();
			} else {
				// We invert current running mode
				var enabled = !gTrackerSettings.getBoolPref ('Enabled');
				gTrackerSettings.setBoolPref ('Enabled', enabled);
			}
		}

		// Update status of the little dog in the corner
		function setIndexingStatus (enabled)
		{
			var elem = document.getElementById ('tracker-icon');
			var bundle = document.getElementById ('bundle_tracker');
			
			// We do not change the icon in case it displays the "error" dog. The user needs to check
			// warnings in case they appear.
			if (elem.getAttribute ('status') == 'error' && getWarningCount () > 0)
				return;
				
			if (enabled) {
				elem.setAttribute ('status', 'enabled');
				elem.setAttribute ('tooltiptext', bundle.getString ('indexingEnabledTooltip'));
			} else {
				elem.setAttribute ('status', 'disabled');
				elem.setAttribute ('tooltiptext', bundle.getString ('indexingDisabledTooltip'));
			}
		}

		function setWarningStatus ()
		{
			var count = getWarningCount ();
			
			// Make sure that we have any warnings at all
			if (count == 0) 
				return;
			
			var elem = document.getElementById ('tracker-icon');
			var bundle = document.getElementById ('bundle_tracker');
			
			elem.setAttribute ('status', 'error');
			elem.setAttribute ('tooltiptext', bundle.getFormattedString ('warningCountDescription', [count]));
		}

		var gServiceObserver = {

			observe: function (subject, topic, data)
			{
				// Act upon various interesting events
				if (data == 'update-enabled') // Indexing was enabled
					setIndexingStatus (true);
				else if (data == 'update-disabled') // Indexing was disabled
					setIndexingStatus (false);
				else if (data == 'new-warning') // A warning was added
					setWarningStatus ();
				else if (data == 'warnings-empty') // All warnings has been seen by the user {
					setIndexingStatus (gTrackerSettings.getBoolPref ('Enabled'));
			}
		};
		
		// This observer will listen for changes made to the queue. Why is this important?
		// Well... if main loop isn't running and something new ends up in the queue,
		// we must start the main loop to get that data out of the queue and into tracker.
		var gQueueObserver = {
			
			observe: function (subject, topic, data)
			{
				// We can safely exit if we are already running (and save some
				// cycles since we don't have to check if we are enabled every time
				// something is added to the queue).
				if (running)
					return;
			
				// Check if indexing is enabled
				if (!gTrackerSettings.getBoolPref ('Enabled'))
					return;
			
				// Enable main loop in case it's disabled
				if (!running)
					start ();
			}
		};
		
		// We need to ensure that the user interface has initialized before we do anything
		window.addEventListener ('load', function () { onLoad (); }, false);
		window.addEventListener ('unload', function () { onUnload (); }, false);

	]]>
	</script>

	<!-- This will appear in the tools menu -->
	<menupopup id="taskPopup">
		<menuitem id="tracker-settings" 
			label="&trackermain.settings;" 
			oncommand="onShowSettings(event);"/>
	</menupopup>
	
	<!-- This gives the small icon in the bottom right corner -->
	<statusbar id="status-bar">
		<statusbarpanel id="tracker-icon" 
			class="statusbarpanel-iconic" 
			status="disabled" 
			oncommand="onStatusbarClick (this);"/>
	</statusbar>
	
</overlay>

