/* tracker-sparql-query.vapi generated by valac 0.10.0, do not modify. */

[CCode (cprefix = "Tracker", lower_case_cprefix = "tracker_")]
namespace Tracker {
	[CCode (cheader_filename = "libtracker-client/tracker-sparql-builder.h")]
	public class SparqlBuilder : GLib.Object {
		[CCode (cprefix = "TRACKER_SPARQL_BUILDER_STATE_", cheader_filename = "libtracker-client/tracker-sparql-builder.h")]
		public enum State {
			UPDATE,
			INSERT,
			DELETE,
			SUBJECT,
			PREDICATE,
			OBJECT,
			BLANK,
			WHERE,
			EMBEDDED_INSERT
		}
		public SparqlBuilder ();
		public void append (string raw);
		public void delete_close ();
		public void delete_open (string? graph);
		public void drop_graph (string iri);
		public SparqlBuilder.embedded_insert ();
		public void insert_close ();
		public void insert_open (string? graph);
		public void insert_silent_open (string? graph);
		public void object (string s);
		public void object_blank_close ();
		public void object_blank_open ();
		public void object_boolean (bool literal);
		public void object_date (ref time_t literal);
		public void object_double (double literal);
		public void object_int64 (int64 literal);
		public void object_iri (string iri);
		public void object_string (string literal);
		public void object_unvalidated (string value);
		public void object_variable (string var_name);
		public void predicate (string s);
		public void predicate_iri (string iri);
		public void prepend (string raw);
		public void subject (string s);
		public void subject_iri (string iri);
		public void subject_variable (string var_name);
		public SparqlBuilder.update ();
		public void where_close ();
		public void where_open ();
		public int length { get; set; }
		public string result { get; }
		public Tracker.SparqlBuilder.State state { get; }
	}
}
